(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{153:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return m}));var r=a(0),n=a.n(r);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=n.a.createContext({}),s=function(e){var t=n.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},d=function(e){var t=s(e.components);return n.a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},u=Object(r.forwardRef)((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=s(a),u=r,m=d["".concat(c,".").concat(u)]||d[u]||h[u]||o;return a?n.a.createElement(m,i({ref:t},l,{components:a})):n.a.createElement(m,i({ref:t},l))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,c=new Array(o);c[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var l=2;l<o;l++)c[l]=a[l];return n.a.createElement.apply(null,c)}return n.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},95:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return p})),a.d(t,"default",(function(){return s}));var r=a(1),n=a(6),o=(a(0),a(153)),c={id:"python-create-amphora",title:"Creating an Amphora with Python",sidebar_label:"Create an Amphora"},i={unversionedId:"SDKs/python-create-amphora",id:"SDKs/python-create-amphora",isDocsHomePage:!1,title:"Creating an Amphora with Python",description:"You can easily create an Amphora with the python SDK. We will first describe the Amphora that we want to create, then create it.",source:"@site/docs/SDKs/python-create-amphora.md",permalink:"/docs/SDKs/python-create-amphora",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/SDKs/python-create-amphora.md",sidebar_label:"Create an Amphora",sidebar:"someSidebar",previous:{title:"Find Data with python SDK",permalink:"/docs/SDKs/python-find-data"},next:{title:"Uploading a file with Python",permalink:"/docs/SDKs/python-upload-file"}},p=[{value:"Describe Amphora",id:"describe-amphora",children:[]},{value:"Save the Id of your new Amphora",id:"save-the-id-of-your-new-amphora",children:[]},{value:"Other code to get you started",id:"other-code-to-get-you-started",children:[]}],l={rightToc:p};function s(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"You can easily create an Amphora with the python SDK. We will first describe the Amphora that we want to create, then create it. "),Object(o.b)("p",null,"Amphoras have standardised metadata. This enables you to quickly search, manage, and consume a variety of different datatypes."),Object(o.b)("h2",{id:"describe-amphora"},"Describe Amphora"),Object(o.b)("p",null,"An Amphora needs a few key bits of metadata. This includes a name, description, and a price. We can create them with simple strings "),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-py"}),'# use meaningful name and descriptions for your Amphora\nname = "Historical hay and feed yields"\ndescription = "Hay yields over a 10 year period from 1999 - 2009.\\n Data is stored in csv format, and all measurements are in kg."\n# set a price you think is fair. It will be billed monthly.\nprice = 10 \n')),Object(o.b)("p",null,"We can also add some other metadata. This includes labels, location, data quality, e.t.c. We can do this as"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-py"}),'# use descriptive labels to appear on the Amphora such as data type, structure and other relevant information\nlabels = ["csv","timeseries","hay","yields"]\n\n# set the correct location. These coordinates are Amphora Data\'s home office.\nlat = -27.45714\nlon = 153.07106\n')),Object(o.b)("p",null,"Then we need to import the right module from the SDK"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-py"}),"from amphora.client import AmphoraDataRepositoryClient\n")),Object(o.b)("p",null,"Finally, we can create our login client and create the Amphora"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-py"}),"client = AmphoraDataRepositoryClient(credentials)\namphora = client.create_amphora(name=name, description=desc, labels=labels, price=price, lat=lat, lon = lon)\n")),Object(o.b)("p",null,"You can check that your Amphora was created by printing its metadata"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-py"}),"print(amphora.metadata)\n")),Object(o.b)("h2",{id:"save-the-id-of-your-new-amphora"},"Save the Id of your new Amphora"),Object(o.b)("p",null,"Amphora Data automatically creates unique identifiers for every new Amphora to prevent accidental duplications and inconsistencies. Its good practice to save the ids of new Amphora you create, so you can easily find them later."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-py"}),"with open('amphora_id.txt', 'w') as f:\n    f.write(f'{amphora.amphora_id}\\n')\n")),Object(o.b)("p",null,"Your Amphora is created, and ready to fill with data!"),Object(o.b)("h2",{id:"other-code-to-get-you-started"},"Other code to get you started"),Object(o.b)("p",null,"You can get code to get you started ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/amphoradata/samples/blob/master/generic_templates/Create_an_Amphora.py"}),"here")))}s.isMDXComponent=!0}}]);